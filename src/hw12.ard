\import Logic (inP)
\import Meta
\import Paths.Meta
\import Utils
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int \elim x
  | neg n => neg (suc n)
  | pos (suc n') => pos (suc n')
  | pos 0 => neg 1

\func testNegPred1 : negPred (pos 1) = pos 1 => idp
\func testNegPred2 : negPred (pos 0) = neg 1 => idp
\func testNegPred3 : negPred (neg 0) = neg 1 => idp
\func testNegPred4 : negPred (neg 1) = neg 2 => idp

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int => {?}

\func \infixl 7 * (x y : Int) : Int => {?}

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | zero
  | :2n BinNat \with {
    | zero => zero
  }
  | :2n+1 BinNat

\func testBinNat1 : :2n zero = zero => idp
\func testBinNat2 : :2n (:2n zero) = zero => idp

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred =>
  \lam b => inP (\case \elim b \with {
    | 0 => (0, idp)
    | suc n => (suc (suc n), idp)
  })

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty =>
  \case p 0 \with {
    | inP (a, suca=0) => \case suca=0
  }

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f) =>
  \lam c => \case q c \with {
    | inP (b, gb=c) => \case p b \with {
      | inP (a, fa=b) => inP (unfold o (a, pmap g fa=b *> gb=c))
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g =>
  \lam c => \case p c \with {
    | inP (a, gfa=c) => inP (f a, gfa=c)
  }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\data Set (A : \Set) : \Set

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (\lam a => \lam x => x = a, \lam x y p =>
      \let p' => pmap (\lam f => f x) p \in rewrite (sym p') idp)

\func inSet {A : \Set} (a : A) (s : Subs A) : \Prop => s a

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \let s : Subs A => \lam x => Not (inSet x (f x)) \in
     \let xs => p s \in \case xs \with {
       | inP (y, eq) => \let ys => s y \in {?}
     }

-- 9. Докажите, что in~ является сюръекцией.

\func in~-sur {A : \Type} {R : A -> A -> \Type} : isSur (in~ {A} {R})
  => \lam b => \case \elim b \with {
    | in~ a => inP (a, idp)
  }

-- Optional
-- 10. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
