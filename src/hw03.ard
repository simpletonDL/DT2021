\import Utils
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestEq : fileTest = (foobar, 8, 13, 55, 18, 21) => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func t''Eq : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp

-- 3. Докажите ассоциативность ++.
\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs)
  \elim xs
    | nil => idp
    | :: x xs' => pmap (:: x) (++-assoc xs' ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs
  | nil, nil => idp
  | nil, :: y ys' => idp *> sym (++-assoc (reverse ys') (y :: nil) nil)
  | :: x xs', nil => pmap (`++ x :: nil) (reverse++ xs' nil)
  | :: x xs', :: y ys' =>
    pmap (`++ x :: nil) (reverse++ xs' (y :: ys')) *>
    (++-assoc (reverse ys' ++ y :: nil) (reverse xs') (x :: nil))

\func lem {A : \Type} (xs' : List A) (x : A) : reverse (reverse xs' ++ x :: nil) = x :: reverse (reverse xs') =>
  reverse++ (reverse xs') (x :: nil)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil => idp
  | :: x xs' => sym ((pmap (x ::) (sym (reverse-isInvolutive xs'))) *> sym (lem xs' x))

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.
\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n
  \elim n
    | 0 => idp
    | suc n' => (pmap (`+ (m + k)) (rdistr n' m k)) *>
                  (+-assoc (m * n') (k * n') (m + k) *>
                    sym (+-assoc (m * n') m (k * n' + k) *>
                      pmap (+ (m * n'))
                        (sym (+-assoc m (k * n') k) *>
                          (sym (sym (+-assoc (k * n') m k) *>
                            (pmap (`+ k) (+-comm (k * n') m)))))))

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k
  \elim k
    | 0 => idp
    | suc k' => (pmap (`+ n) (ldistr n m k')) *> +-assoc (n * m) (n * k') n
